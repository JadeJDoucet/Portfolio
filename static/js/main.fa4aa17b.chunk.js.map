{"version":3,"sources":["project-data/headshots/headshot-close.jpg","components/PersonalProfile.js","components/ProjectListItem.js","project-data/projects.js","components/ProjectList.js","components/NavBar.js","App.js","serviceWorker.js","index.js","project-data/project-photos/scannar-proto-image.png"],"names":["module","exports","PersonalProfile","useState","toggleEmail","setToggleEmail","profileFixed","className","style","marginTop","Card","backgroundColor","border","boxShadow","transition","Image","src","require","wrapped","ui","Content","Header","Meta","Description","Button","onClick","ProjectListItem","project","name","description","coverImage","Grid","Row","marginBottom","Column","width","rounded","maxHeight","projects","images","ProjectList","marginLeft","map","i","key","NavBar","activeItem","setActiveItem","Menu","borderless","stackable","borderRadius","Item","active","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yLAAAA,EAAOC,QAAU,IAA0B,4C,gICG5B,SAASC,IAAmB,IAAD,EACFC,oBAAS,GADP,mBACjCC,EADiC,KACpBC,EADoB,OAEAF,oBAAS,GAFT,mBAEjCG,EAFiC,UAqBxC,OACE,yBAAKC,UAAU,uBAAuBC,MALb,CACzBC,UAAW,SAKT,kBAACC,EAAA,EAAD,CACEF,MAAOF,EApBQ,CACnBK,gBAAiB,OACjBC,OAAQ,iBACRC,UAAW,iCACXC,WAAY,2CAGY,CACxBH,gBAAiB,OACjBC,OAAQ,iBACRC,UAAW,mCAYP,kBAACE,EAAA,EAAD,CACAC,IAAKC,EAAQ,KACbC,SAAO,EACPC,IAAI,IAEJ,kBAACT,EAAA,EAAKU,QAAN,KACA,kBAACV,EAAA,EAAKW,OAAN,oBACA,kBAACX,EAAA,EAAKY,KAAN,KACI,0BAAMf,UAAU,QAAhB,sBAEF,kBAACG,EAAA,EAAKa,YAAN,0NAGA,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMpB,GAAgBD,KAAvC,WACCA,EAAc,kBAACM,EAAA,EAAKa,YAAN,8BAA6D,Q,aCxCvE,SAASG,EAAT,GAAuC,IAAZC,EAAW,EAAXA,QAChCC,EAAkCD,EAAlCC,KAAMC,EAA4BF,EAA5BE,YAAaC,EAAeH,EAAfG,WAW3B,OACE,kBAACC,EAAA,EAAKC,IAAN,CAAUxB,MANK,CACfC,UAAW,QACXwB,aAAc,SAKZ,kBAACF,EAAA,EAAKG,OAAN,CAAaC,MAAO,GAClB,kBAACpB,EAAA,EAAD,CAAOC,IAAKc,EAAYM,SAAO,EAAC5B,MAZnB,CACjB6B,UAAW,UAaT,kBAACN,EAAA,EAAKG,OAAN,CAAaC,MAAO,GAClB,4BAAKP,GACL,2BAAIC,KCtBZ,IAqBeS,EArBE,CACf,CACEV,KAAM,UACNC,YAAa,qCACbC,WAAYb,EAAQ,IACpBsB,OAAQ,IAEV,CACEX,KAAM,QACNC,YAAa,uDACbC,WAAYb,EAAQ,IACpBsB,OAAQ,IAEV,CACEX,KAAM,kBACNC,YAAa,kDACbC,WAAYb,EAAQ,IACpBsB,OAAQ,KCRG,SAASC,IAKtB,OACE,kBAACT,EAAA,EAAD,CAAMvB,MALU,CAChBiC,WAAY,QAKTH,EAASI,KAAI,SAACf,EAASgB,GAAV,OACd,kBAACjB,EAAD,CAAiBkB,IAAKD,EAAGhB,QAASA,Q,aCdzB,SAASkB,IAAU,IAAD,EACK1C,mBAAS,IADd,mBACxB2C,EADwB,KACZC,EADY,KAU/B,OACE,kBAACC,EAAA,EAAD,CACAC,YAAU,EACV1C,UAAU,2BACV2C,WAAS,EACT1C,MAZqB,CACrBG,gBAAiB,OACjBC,OAAQ,iBACRC,UAAW,iCACXsC,aAAc,IAUZ,kBAACH,EAAA,EAAKI,KAAN,CACA7C,UAAU,aACR8C,OAAuB,UAAfP,EACRrB,QAAS,kBAAMsB,EAAc,WAH/B,YAOA,kBAACC,EAAA,EAAKI,KAAN,CACEC,OAAuB,YAAfP,EACRrB,QAAS,kBAAMsB,EAAc,aAF/B,YCPSO,MAZf,WACE,OACE,6BACE,kBAACT,EAAD,MACA,yBAAKtC,UAAU,OACb,kBAACL,EAAD,MACA,kBAACsC,EAAD,SCFYe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBErInBrE,EAAOC,QAAU,IAA0B,kD","file":"static/js/main.fa4aa17b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/headshot-close.1dda9e3d.jpg\";","import React, { useState } from 'react';\nimport { Card, Image, Button, Visibility } from 'semantic-ui-react';\n\nexport default function PersonalProfile() {\n  const [toggleEmail, setToggleEmail] = useState(false);\n  const [profileFixed, setFixedProfile] = useState(false);\n  \n  const profileStyle = {\n    backgroundColor: '#fff',\n    border: '1px solid #ddd',\n    boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)',\n    transition: 'box-shadow 0.5s ease, padding 0.5s ease',\n  }\n  \n  const fixedProfileStyle = {\n    backgroundColor: '#fff',\n    border: '1px solid #ddd',\n    boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)',\n  }\n\n  const cardContainerStyle = {\n    marginTop: '3.3%',\n  }\n\n  return (\n    <div className=\"ui left sticky fixed\" style={cardContainerStyle}>\n      <Card\n        style={profileFixed ? profileStyle : fixedProfileStyle}\n      >\n        <Image\n        src={require(\"../project-data/headshots/headshot-close.jpg\")}\n        wrapped\n        ui={false}\n        />\n        <Card.Content>\n        <Card.Header>Jade Doucet</Card.Header>\n        <Card.Meta>\n            <span className='date'>Software Engineer</span>\n        </Card.Meta>\n          <Card.Description>I am a full-stack software engineer from New Orleans with a passion for technology.\n            I'm experienced in web, mobile, and game development. \n            I've developed AR mobile apps, a variety of web apps, and video games. </Card.Description>\n          <Button onClick={() => setToggleEmail(!toggleEmail)}>Contact</Button>\n          {toggleEmail ? <Card.Description>jadejdoucet@gmail.com</Card.Description> : null}\n        </Card.Content>\n      </Card>\n    </div>\n  )\n}","import React from 'react';\nimport { Grid, Image } from 'semantic-ui-react';\n\nexport default function ProjectListItem({ project }) {\n  const { name, description, coverImage } = project;\n\n  const imageStyle = {\n    maxHeight: '80%',\n  }\n\n  const rowStyle = {\n    marginTop: '4.05%',\n    marginBottom: '-10%',\n  }\n\n  return (\n    <Grid.Row style={rowStyle}>\n      <Grid.Column width={3}>\n        <Image src={coverImage} rounded style={imageStyle}/>\n      </Grid.Column>\n      <Grid.Column width={6}>\n        <h1>{name}</h1>\n        <p>{description}</p>\n      </Grid.Column>\n    </Grid.Row>\n  );\n}","const projects = [\n  {\n    name: 'Scannar',\n    description: 'Augmented reality pricing solution',\n    coverImage: require('./project-photos/scannar-proto-image.png'),\n    images: [],\n  },\n  {\n    name: 'Readr',\n    description: 'Reading suggestion / open source reading application', \n    coverImage: require('./project-photos/scannar-proto-image.png'),\n    images: [],\n  },\n  {\n    name: 'Adopt-A-Pothole',\n    description: 'Crowdfunding app to restore New Orleans streets',\n    coverImage: require('./project-photos/scannar-proto-image.png'),\n    images: [],\n  },\n];\n\nexport default projects;","import React from 'react';\nimport { Grid } from 'semantic-ui-react'\n\n// import components\nimport ProjectListItem from './ProjectListItem';\n\n// import projects\nimport projects from '../project-data/projects';\n\nexport default function ProjectList() {\n  const gridStyle = {\n    marginLeft: '17%', // aligns next to profile card\n  };\n\n  return (\n    <Grid style={gridStyle}>\n      {projects.map((project, i) => (\n      <ProjectListItem key={i} project={project} />\n        )\n      )}\n    </Grid>\n  );\n};\n","import React, { useState } from 'react';\nimport { Menu } from 'semantic-ui-react';\n\nexport default function NavBar() {\n  const [activeItem, setActiveItem] = useState('');\n\n  const fixedMenuStyle = {\n    backgroundColor: '#fff',\n    border: '1px solid #ddd',\n    boxShadow: '0px 4px 5px rgba(0, 0, 0, 0.2)',\n    borderRadius: 5,\n  };\n\n  return (\n    <Menu\n    borderless\n    className=\"ui top fixed menu header\"\n    stackable\n    style={fixedMenuStyle}\n    >\n      <Menu.Item\n      className=\"right item\"\n        active={activeItem === 'about'}\n        onClick={() => setActiveItem('about')}\n      >\n        About Me\n      </Menu.Item>\n      <Menu.Item\n        active={activeItem === 'contact'}\n        onClick={() => setActiveItem('contact')}\n      >\n        Contact\n      </Menu.Item>\n    </Menu>\n  )\n}","import React from 'react';\nimport './App.css';\n\n// import components\nimport PersonalProfile from './components/PersonalProfile';\nimport ProjectList from './components/ProjectList';\nimport NavBar from './components/NavBar';\n\nfunction App() {\n  return (\n    <div>\n      <NavBar />\n      <div className=\"App\">\n        <PersonalProfile />\n        <ProjectList />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/scannar-proto-image.6e594c31.png\";"],"sourceRoot":""}